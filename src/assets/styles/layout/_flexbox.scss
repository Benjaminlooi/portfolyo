$fg-grid-columns: 12 !default;
$fg-grid-max-width: 1200px !default;
$fg-grid-gutter-width: 1rem !default;

$fx-grid-outer-margin-min: 20px !default;
$fx-grid-outer-margin-max: 80px !default;

$fg-grid-breakpoints: (
  sm 48em 46rem,
  md 62em 61rem,
  lg 75em 71rem
) !default;

$gutter-compensation: $fg-grid-gutter-width * .5 * -1;
$half-gutter-width: $fg-grid-gutter-width * .5;

.fg-wrapper-maxed {
  margin: 0 auto;
  box-sizing: border-box;
  max-width: $fg-grid-max-width;
}

@mixin fg-container-fluid($min-margin, $max-margin) {
  margin-right: auto;
  margin-left: auto;

  &:not(.fx-box-spacing) {
    @include fluid-size(padding-left padding-right, $min-margin, $max-margin);
  }

  &.fx-box-spacing {
    @include fluid-size(padding, $min-margin, $max-margin);
  }
}

.fg-container-fluid {
  @include fg-container-fluid(
    $fx-grid-outer-margin-min,
    $fx-grid-outer-margin-max
  );
 }

.fg-row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;

  @if (unit($gutter-compensation) == '') {
    margin-right: #{$gutter-compensation}rem;
    margin-left: #{$gutter-compensation}rem;
  }
  @else {
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;
  }
}

.fg-row.fg-reverse {
  flex-direction: row-reverse;
}

.fg-col.fg-reverse {
  flex-direction: column-reverse;
}

@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;
  flex-grow: 0;
  flex-shrink: 0;

  @if (unit($half-gutter-width) == '') {
    padding-right: #{$half-gutter-width}rem;
    padding-left: #{$half-gutter-width}rem;
  }
  @else {
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
  }
}

$name: xs;

.fg-col-#{$name} {
  flex-basis: auto;

  @include flexboxgrid-sass-col-common;
}

@for $i from 1 through $fg-grid-columns {
  .fg-col-#{$name}-#{$i} {
    flex-basis: 100% / $fg-grid-columns * $i;
    max-width: 100% / $fg-grid-columns * $i;

    @include flexboxgrid-sass-col-common;
  }
}

@for $i from 1 through $fg-grid-columns {
  .fg-col-#{$name}-offset-#{$i} {
    margin-left: 100% / $fg-grid-columns * $i;

    @include flexboxgrid-sass-col-common;
  }
}

.fg-col-#{$name} {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

.fg-start-#{$name} {
  justify-content: flex-start;
  text-align: start;
}

.fg-center-#{$name} {
  justify-content: center;
  text-align: center;
}

.fg-end-#{$name} {
  justify-content: flex-end;
  text-align: end;
}

.fg-top-#{$name} {
  align-items: flex-start;
}

.fg-middle-#{$name} {
  align-items: center;
}

.fg-bottom-#{$name} {
  align-items: flex-end;
}

.fg-around-#{$name} {
  justify-content: space-around;
}

.fg-between-#{$name} {
  justify-content: space-between;
}

.fg-first-#{$name} {
  order: -1;
}

.fg-last-#{$name} {
  order: 1;
}

@each $breakpoint in $fg-grid-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  $container: nth($breakpoint, 3);

  @media only screen and (min-width: $size) {
    .fg-container {
      width: $container;
    }

    .fg-col-#{$name} {
      flex-basis: auto;

      @include flexboxgrid-sass-col-common;
    }

    @for $i from 1 through $fg-grid-columns {
      .fg-col-#{$name}-#{$i} {
        flex-basis: 100% / $fg-grid-columns * $i;
        max-width: 100% / $fg-grid-columns * $i;

        @include flexboxgrid-sass-col-common;
      }
    }

    @for $i from 1 through $fg-grid-columns {
      .fg-col-#{$name}-offset-#{$i} {
        margin-left: 100% / $fg-grid-columns * $i;

        @include flexboxgrid-sass-col-common;
      }
    }

    .fg-col-#{$name} {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }

    .fg-start-#{$name} {
      justify-content: flex-start;
      text-align: start;
    }

    .fg-center-#{$name} {
      justify-content: center;
      text-align: center;
    }

    .fg-end-#{$name} {
      justify-content: flex-end;
      text-align: end;
    }

    .fg-top-#{$name} {
      align-items: flex-start;
    }

    .fg-middle-#{$name} {
      align-items: center;
    }

    .fg-bottom-#{$name} {
      align-items: flex-end;
    }

    .fg-around-#{$name} {
      justify-content: space-around;
    }

    .fg-between-#{$name} {
      justify-content: space-between;
    }

    .fg-first-#{$name} {
      order: -1;
    }

    .fg-last-#{$name} {
      order: 1;
    }
  }
}

.fx-layout.fx-horizontal,
.fx-layout.fx-horizontal-reverse,
.fx-layout.fx-vertical,
.fx-layout.fx-vertical-reverse {
  display: flex;
}

.fx-layout.fx-inline {
  display: inline-flex;
}

.fx-layout.fx-horizontal {
  flex-direction: row;
}

.fx-layout.fx-horizontal-reverse {
  flex-direction: row-reverse;
}

.fx-layout.fx-vertical {
  flex-direction: column;
}

.fx-layout.fx-vertical-reverse {
  flex-direction: column-reverse;
}

.fx-layout.wrap {
  flex-wrap: wrap;
}

.fx-layout.no-wrap {
  flex-wrap: nowrap;
}

.fx-layout.wrap-reverse {
  flex-wrap: wrap-reverse;
}

.fx-flex-auto {
  flex: 1 1 auto;
}

.fx-flex-none {
  flex: none;
}

.fx-flex,
.fx-flex-1 {
  flex: 1;
}

.fx-grow-0 {
  flex-grow: 0;
}

.fx-grow-1 {
  flex-grow: 1;
}

.fx-shrink-1 {
  flex-shrink: 1;
}

.fx-shrink-0 {
  flex-shrink: 0;
}

.fx-basis-0 {
  flex-basis: 0;
}

.fx-layout.fx-start {
  align-items: flex-start;
}

.fx-layout.fx-center,
.fx-layout.fx-center-center {
  align-items: center;
}

.fx-layout.fx-end {
  align-items: flex-end;
}

.fx-layout.fx-start-justified {
  justify-content: flex-start;
}

.fx-layout.fx-center-justified,
.fx-layout.fx-center-center {
  justify-content: center;
}

.fx-layout.fx-end-justified {
  justify-content: flex-end;
}

.fx-layout.fx-around-justified {
  justify-content: space-around;
}

.fx-layout.fx-justified {
  justify-content: space-between;
}

.fx-self-start {
  align-self: flex-start;
}

.fx-self-center {
  align-self: center;
}

.fx-self-end {
  align-self: flex-end;
}

.fx-self-stretch {
  align-self: stretch;
}
